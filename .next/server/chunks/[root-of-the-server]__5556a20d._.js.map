{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/nikhil.s5/Downloads/Oration/career-counselor-chat/src/lib/supabaseClient.js"],"sourcesContent":["import { createClient } from \"@supabase/supabase-js\";\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || \"https://patkavwagxqpcuvdonha.supabase.co\";\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBhdGthdndhZ3hxcGN1dmRvbmhhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc0ODMyNzYsImV4cCI6MjA3MzA1OTI3Nn0.HYXp_rF00JU5jbdeK2xNeM6Q3BJGAdbm_lW27a8hqG8\";\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n\r\n\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,wBAAwB,IAAI;AAC5D,MAAM,kBAAkB,QAAQ,GAAG,CAAC,6BAA6B,IAAI;AAE9D,MAAM,WAAW,IAAA,yMAAY,EAAC,aAAa","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/nikhil.s5/Downloads/Oration/career-counselor-chat/src/app/api/messages/stream/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { supabase } from \"@/lib/supabaseClient\";\r\n\r\nexport const runtime = \"nodejs\";\r\n\r\nfunction messagePayload(baseMessages) {\r\n  const defaultSystemPrompt =\r\n    \"You are a helpful, empathetic career counselor. Provide concrete, actionable advice, ask clarifying questions, and keep responses concise and structured.\";\r\n  const hasSystem = baseMessages[0]?.role === \"system\";\r\n  const withSystem = hasSystem\r\n    ? baseMessages\r\n    : [{ role: \"system\", content: defaultSystemPrompt }, ...baseMessages];\r\n  return withSystem.map((m) => ({ role: m.role, content: m.content }));\r\n}\r\n\r\nexport async function POST(req) {\r\n  const cohereKey = process.env.COHERE_API_KEY || \"vdcFzipj6WmsuMir75KhPiymKYKuBQa9Gh3HvUnL\";\r\n  if (!cohereKey) {\r\n    return new NextResponse(\"Missing COHERE_API_KEY\", { status: 500 });\r\n  }\r\n  \r\n  const body = await req.json();\r\n  const { sessionId, content, systemPrompt } = body ?? {};\r\n  if (!sessionId || !content) {\r\n    return NextResponse.json(\r\n      { error: \"sessionId and content are required\" },\r\n      { status: 400 }\r\n    );\r\n  }\r\n\r\n  // Insert user message first (only if Supabase is configured)\r\n  if (process.env.NEXT_PUBLIC_SUPABASE_URL && process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\r\n    const { error: insertUserErr } = await supabase\r\n      .from(\"messages\")\r\n      .insert({ session_id: sessionId, role: \"user\", content });\r\n    if (insertUserErr) {\r\n      return NextResponse.json({ error: insertUserErr.message }, { status: 500 });\r\n    }\r\n  }\r\n\r\n  // Build minimal context: only system + current user message (no prior history)\r\n  const history = [];\r\n  if (systemPrompt && typeof systemPrompt === \"string\" && systemPrompt.trim().length > 0) {\r\n    history.push({ role: \"system\", content: systemPrompt.trim() });\r\n  }\r\n\r\n  // Create a streaming response (single-chunk using Cohere)\r\n  const stream = new ReadableStream({\r\n    start(controller) {\r\n      (async () => {\r\n        let fullText = \"\";\r\n        try {\r\n          // Map to Cohere format\r\n          let preamble = \"You are a helpful, empathetic career counselor. Provide concrete, actionable advice, ask clarifying questions, and keep responses concise and structured.\";\r\n          for (const m of history) {\r\n            if (m.role === \"system\") {\r\n              preamble = m.content || preamble;\r\n            }\r\n          }\r\n\r\n          const res = await fetch(\"https://api.cohere.ai/v1/chat\", {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${cohereKey}`,\r\n            },\r\n            body: JSON.stringify({\r\n              model: \"command-r\",\r\n              message: content,\r\n              chat_history: [], // no previous messages\r\n              preamble,\r\n              temperature: 0.4,\r\n            }),\r\n            signal: AbortSignal.timeout(60000),\r\n          });\r\n\r\n          if (!res.ok) {\r\n            const errText = await res.text();\r\n            throw new Error(errText || res.statusText);\r\n          }\r\n\r\n          const data = await res.json();\r\n          fullText = (data?.text || \"\").trim();\r\n          if (fullText.length === 0) throw new Error(\"Empty response from Cohere\");\r\n\r\n          // Send as one chunk\r\n          controller.enqueue(new TextEncoder().encode(fullText));\r\n\r\n          // Persist assistant message (only if Supabase is configured)\r\n          if (fullText.trim().length > 0 && process.env.NEXT_PUBLIC_SUPABASE_URL && process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\r\n            await supabase\r\n              .from(\"messages\")\r\n              .insert({ session_id: sessionId, role: \"assistant\", content: fullText });\r\n          }\r\n\r\n          controller.close();\r\n        } catch (e) {\r\n          const msg = typeof e?.message === \"string\" ? e.message : \"Stream error\";\r\n          controller.enqueue(new TextEncoder().encode(`[stream-error] ${msg}`));\r\n          controller.close();\r\n        }\r\n      })();\r\n    },\r\n  });\r\n\r\n  return new NextResponse(stream, {\r\n    headers: {\r\n      \"Content-Type\": \"text/plain; charset=utf-8\",\r\n      \"Cache-Control\": \"no-cache\",\r\n    },\r\n  });\r\n}\r\n\r\n\r\n"],"names":[],"mappings":"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","debugId":null}}]
}